AWSTemplateFormatVersion: 2010-09-09
Description: ECS service

Parameters:
  ClusterName:
    Description: Cluster name
    Type: String
    Default: 'mycluster'
  DesiredCount:
    Description: Number of tasks to launch for the service
    Type: Number
    Default: 2
    MinValue: 1
  ListenPort:
    Description: Listening port for container
    Type: Number
    Default: 80
  ContainerName:
    Description: Container Name
    Type: String
    Default: 'sample-app'

Resources:

  TaskDefinition:
    Type: "AWS::ECS::TaskDefinition"
    Properties:
      ContainerDefinitions:
        - Name: !Sub task-${ContainerName}
          Image: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${ContainerName}
          PortMappings:
            - ContainerPort: !Ref ListenPort
          Cpu: 1024
          Memory: 1024
          MemoryReservation: 512
          Essential: true
          Environment:
            - Name: PORT
              Value: !Ref ListenPort
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-create-group: "true"
              awslogs-region: !Sub "${AWS::Region}"
              awslogs-group: !Sub "${ClusterName}-${ContainerName}"
      Family: !Sub "family-${ContainerName}"
      NetworkMode: bridge

  Service:
    Type: "AWS::ECS::Service"
    Properties:
      ServiceName: !Sub service-${ContainerName}
      Cluster: !Ref ClusterName
      DeploymentConfiguration:
        MinimumHealthyPercent: 100
        MaximumPercent: 200
      DesiredCount: !Ref DesiredCount
      HealthCheckGracePeriodSeconds: 60
      LaunchType: EC2
      LoadBalancers:
        - ContainerName: !Sub task-${ContainerName}
          ContainerPort: !Ref ListenPort
          TargetGroupArn: !Ref TargetGroup
      PlacementStrategies:
        - Field: attribute:ecs.availability-zone
          Type: spread
      SchedulingStrategy: REPLICA
      TaskDefinition: !Ref TaskDefinition
    DependsOn:
      - ListenerRule

  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: "30"
      Subnets:
        - Fn::ImportValue: ecsworkshop:PublicSubnetOne
        - Fn::ImportValue: ecsworkshop:PublicSubnetTwo
      SecurityGroups:
        - Fn::ImportValue: ecsworkshop:PublicLoadBalancerSG

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      TargetType: instance
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      Matcher:
        HttpCode: "200-299"
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 10
      VpcId:
        Fn::ImportValue: ecsworkshop:VpcId
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: "5"
        - Key: slow_start.duration_seconds
          Value: "60"

  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref TargetGroup
          Type: forward
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: HTTP

  ListenerRule:
    Type: "AWS::ElasticLoadBalancingV2::ListenerRule"
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup
      Conditions:
        - Field: path-pattern
          Values:
            - /
      ListenerArn: !Ref Listener
      Priority: 1

  ScalingRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - application-autoscaling.amazonaws.com
            Action: ["sts:AssumeRole"]
      Policies:
        - PolicyName: adjust-service-desired-count
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action: ecs:UpdateService
                Resource: !Ref Service

  ScalableTarget:
    Type: "AWS::ApplicationAutoScaling::ScalableTarget"
    Properties:
      MaxCapacity: 1000
      MinCapacity: 3
      ResourceId: !Join
        - "/"
        - - service
          - !Ref ClusterName
          - !GetAtt Service.Name
      RoleARN: !GetAtt ScalingRole.Arn
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs

  ScalingPolicy:
    Type: "AWS::ApplicationAutoScaling::ScalingPolicy"
    Properties:
      PolicyName: ScaleWithCpu
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref ScalableTarget
      TargetTrackingScalingPolicyConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization
        TargetValue: 80

Outputs:
  Url:
    Description: Service URL
    Value: !GetAtt LoadBalancer.DNSName